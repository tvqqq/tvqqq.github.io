{"version":3,"sources":["webpack:///./src/templates/author.js"],"names":["Author","data","location","pageContext","author","posts","allMarkdownRemark","edges","twitterUrl","twitter","replace","facebookUrl","facebook","type","className","name","bio","website","href","target","rel","profile_image","src","alt","map","node","key","id","post"],"mappings":"6FAAA,wDAkEeA,UArDA,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YACxBC,EAASD,EAAYC,OACrBC,EAAQJ,EAAKK,kBAAkBC,MAC/BC,EAAaJ,EAAOK,QAAP,uBAAwCL,EAAOK,QAAQC,QAAQ,KAAvB,IAAqC,KAC1FC,EAAcP,EAAOQ,SAAP,4BAA8CR,EAAOQ,SAASF,QAAQ,MAAxB,IAAuC,KAEzG,OACI,oCACI,kBAAC,IAAD,eACIT,KAAMG,EACNF,SAAUA,EACVW,KAAK,UACDT,IAER,kBAAC,IAAD,KACI,yBAAKU,UAAU,aACX,4BAAQA,UAAU,iBACd,yBAAKA,UAAU,yBACX,4BAAKV,EAAOW,MACXX,EAAOY,KAAO,2BAAIZ,EAAOY,KAC1B,yBAAKF,UAAU,sBACVV,EAAOa,SAAW,uBAAGH,UAAU,qBAAqBI,KAAMd,EAAOa,QAASE,OAAO,SAASC,IAAI,uBAA5E,WAClBZ,GAAc,uBAAGM,UAAU,qBAAqBI,KAAMV,EAAYW,OAAO,SAASC,IAAI,uBAAxE,WACdT,GAAe,uBAAGG,UAAU,qBAAqBI,KAAMP,EAAaQ,OAAO,SAASC,IAAI,uBAAzE,cAGxB,yBAAKN,UAAU,uBACVV,EAAOiB,eAAiB,yBAAKC,IAAKlB,EAAOiB,cAAeE,IAAKnB,EAAOW,SAG7E,6BAASD,UAAU,aACdT,EAAMmB,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OAEP,kBAAC,IAAD,CAAUC,IAAKD,EAAKE,GAAIC,KAAMH,QAGtC,kBAAC,IAAD,CAAYtB,YAAaA","file":"component---src-templates-author-js-a00ef94bc32dd95a4fcd.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\n\nimport { Layout, PostCard, Pagination } from '../components/common'\nimport { MetaData } from '../components/common/meta'\n\n/**\n* Author page (/author/:slug)\n*\n* Loads all posts for the requested author incl. pagination.\n*\n*/\nconst Author = ({ data, location, pageContext }) => {\n    const author = pageContext.author\n    const posts = data.allMarkdownRemark.edges\n    const twitterUrl = author.twitter ? `https://twitter.com/${author.twitter.replace(/^@/, ``)}` : null\n    const facebookUrl = author.facebook ? `https://www.facebook.com/${author.facebook.replace(/^\\//, ``)}` : null\n    // console.log(`Authors -> `, author)\n    return (\n        <>\n            <MetaData\n                data={author}\n                location={location}\n                type=\"author\"\n                {...author}\n            />\n            <Layout>\n                <div className=\"container\">\n                    <header className=\"author-header\">\n                        <div className=\"author-header-content\">\n                            <h1>{author.name}</h1>\n                            {author.bio && <p>{author.bio}</p>}\n                            <div className=\"author-header-meta\">\n                                {author.website && <a className=\"author-header-item\" href={author.website} target=\"_blank\" rel=\"noopener noreferrer\">Website</a>}\n                                {twitterUrl && <a className=\"author-header-item\" href={twitterUrl} target=\"_blank\" rel=\"noopener noreferrer\">Twitter</a>}\n                                {facebookUrl && <a className=\"author-header-item\" href={facebookUrl} target=\"_blank\" rel=\"noopener noreferrer\">Facebook</a>}\n                            </div>\n                        </div>\n                        <div className=\"author-header-image\">\n                            {author.profile_image && <img src={author.profile_image} alt={author.name} />}\n                        </div>\n                    </header>\n                    <section className=\"post-feed\">\n                        {posts.map(({ node }) => (\n                            // The tag below includes the markup for each post - components/common/PostCard.js\n                            <PostCard key={node.id} post={node} />\n                        ))}\n                    </section>\n                    <Pagination pageContext={pageContext} />\n                </div>\n            </Layout>\n        </>\n    )\n}\n\nAuthor.propTypes = {\n    data: PropTypes.shape({\n        allMarkdownRemark: PropTypes.object.isRequired,\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n    pageContext: PropTypes.object,\n}\n\nexport default Author\n\nexport const pageQuery = graphql`\n    query MarkDownAuthorQuery($slug: String!, $limit: Int!, $skip: Int!) {\n        allMarkdownRemark(\n            filter: {\n                frontmatter: {\n                    author: {frontmatter: {slug: {eq: $slug}}}\n                    draft: { ne: true }\n                }\n            }\n            skip: $skip, \n            limit: $limit\n        ){\n            totalCount\n            edges {\n                node {\n                    id\n                    html\n                    frontmatter {\n                        title\n                        slug\n                        tags {\n                            frontmatter {\n                                name\n                            }\n                        }\n                        feature_image {\n                            childImageSharp {\n                                fluid(maxWidth: 400, maxHeight: 250) {\n                                    ...GatsbyImageSharpFluid\n                                }\n                              }\n                        }\n                    }\n                    excerpt\n                }\n            }\n        }\n    }\n`\n"],"sourceRoot":""}
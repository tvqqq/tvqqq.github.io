{"version":3,"sources":["webpack://tvqqq.github.io/./src/components/PostCard/index.jsx","webpack://tvqqq.github.io/./src/components/PostCard/postCard.module.less","webpack://tvqqq.github.io/./src/templates/tags/index.jsx","webpack://tvqqq.github.io/./src/templates/tags/tags.module.less"],"names":["props","data","node","frontmatter","excerpt","className","Link","to","Utils","path","style","backgroundImage","cover","childImageSharp","fluid","src","title","moment","Date","date","format","margin","color","icon","faHashtag","size","fixedWidth","tags","join","tag","pageContext","tagName","Config","name","tagPagePath","tagImage","allFile","edges","find","edge","posts","allMarkdownRemark","Header","description","keywords","imageUrl","Sidebar","alt","gutter","map","post","key","xs","sm","md","lg","PostCard"],"mappings":"yOAuCA,EA/BiB,SAACA,GAChB,MAAqDA,EAA7CC,KAAQC,KAAQC,EAAxB,EAAwBA,YAAaC,EAArC,EAAqCA,QAErC,OACE,uBAAKC,UCXa,oCDYhB,gBAAC,EAAAC,KAAD,CAAMC,GAAIC,mBAAqBL,EAAYM,OACzC,uBACEJ,UCbe,sCDcfK,MAAO,CACLC,gBAAgB,QAAQR,EAAcA,EAAYS,MAAMC,gBAAgBC,MAAMC,IAAM,IAArE,OAGnB,uBAAKV,UCjBO,kCDkBV,sBAAIA,UChBK,iCDgBoBF,EAAcA,EAAYa,MAAQ,IAC/D,uBAAKX,UClBG,gCDmBN,4BAAOF,EAAcc,IAAO,IAAIC,KAAKf,EAAYgB,OAAOC,OAAO,cAAgB,IAC/E,wBAAMV,MAAO,CAAEW,OAAQ,iBAAkBC,MAAO,SAC7C,IACD,gBAAC,IAAD,CAAiBC,KAAMC,MAAWC,KAAK,KAAKC,YAAU,KAExD,+BACMvB,EAAYwB,KAAKC,KAAK,QAG9B,yBAAIxB,Q,8OEgGd,EA9GgB,SAAC,GAA2B,IAAzBH,EAAwB,EAAxBA,KACT4B,EADiC,EAAlBC,YACfD,IACFE,EAAUC,SAAYH,GAAKI,MAAQzB,eAAiBqB,GACpDK,EAAcF,cACdG,EAAWlC,EAAKmC,QAAQC,MAAMC,MAAK,SAACC,GAAD,OAAUA,EAAKrC,KAAK+B,OAASJ,KAAK3B,KACxEW,gBAAgBC,MACb0B,EAAQvC,EAAKwC,kBAAkBJ,MACrC,OACE,qBAAQhC,UAAU,gBAChB,qBAAQA,UAAU,aAChB,gBAACqC,EAAA,EAAD,MACA,gBAAC,IAAD,CACE1B,MAAOe,EACPY,YAAW,mBAAqBZ,EAArB,KAAiCC,SAAYH,GAAKc,YAAlD,IACXlC,KAAMD,mBAAqB0B,EAAaL,GACxCe,SAAU,CAACb,GACXc,SAAUV,EAASpB,MAErB,gBAAC+B,EAAA,EAAD,KACE,uBAAKzC,UAAS,+CACZ,8BAEG0B,GAEH,uBAAK1B,UCxCe,0CDyClB,gBAAC,IAAD,CAAKA,UCxCI,gCDwCwBS,MAAOqB,EAAUY,IAAKhB,KAEzD,sBAAI1B,UAAU,cACX2B,SAAYH,GAAKc,cAGtB,qBAAKK,OAAQ,CAAC,GAAI,KACfR,EAAMS,KAAI,SAACC,EAAMC,GAAP,OAET,qBAAKA,IAAKA,EAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GACzC,gBAACC,EAAA,EAAD,CAAUvD,KAAMiD","file":"component---src-templates-tags-index-jsx-768c2f2e095ac0df6397.js","sourcesContent":["import React from 'react';\nimport moment from 'moment';\nimport { Link } from 'gatsby';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHashtag } from '@fortawesome/free-solid-svg-icons';\nimport * as style from './postCard.module.less';\nimport Utils from '../../utils/pageUtils';\n\nconst PostCard = (props) => {\n  const { data: { node: { frontmatter, excerpt } } } = props;\n\n  return (\n    <div className={style.postCard}>\n      <Link to={Utils.resolvePageUrl(frontmatter.path)}>\n        <div\n          className={style.postCardImg}\n          style={{\n            backgroundImage: `url(${frontmatter ? frontmatter.cover.childImageSharp.fluid.src : ''})`,\n          }}\n        />\n        <div className={style.mrTp20}>\n          <h3 className={style.title}>{frontmatter ? frontmatter.title : ''}</h3>\n          <div className={style.meta}>\n            <span>{frontmatter ? moment(new Date(frontmatter.date)).format('DD-MM-YYYY') : ''}</span>\n            <span style={{ margin: '0px 2px 0 -2px', color: '#ccc' }}>\n              {' '}\n              <FontAwesomeIcon icon={faHashtag} size=\"sm\" fixedWidth />\n            </span>\n            <span>\n              {`${frontmatter.tags.join(', ')}`}\n            </span>\n          </div>\n          <p>{excerpt}</p>\n        </div>\n      </Link>\n    </div>\n  );\n};\n\nexport default PostCard;\n","// extracted by mini-css-extract-plugin\nexport var postCard = \"postCard-module--postCard--1AoLJ\";\nexport var postCardImg = \"postCard-module--postCardImg--2wIDK\";\nexport var mrTp20 = \"postCard-module--mrTp20--3etb6\";\nexport var meta = \"postCard-module--meta--2gXzH\";\nexport var title = \"postCard-module--title--yFTrw\";","/* eslint-disable react/forbid-prop-types */\n/* Vendor imports */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\nimport Img from 'gatsby-image';\nimport {\n  Layout, Row, Col,\n} from 'antd';\n/* App imports */\nimport SEO from '../../components/Seo';\nimport Header from '../../components/PageLayout/Header';\nimport PostCard from '../../components/PostCard';\nimport SidebarWrapper from '../../components/PageLayout/Sidebar';\nimport Config from '../../../config';\nimport Utils from '../../utils/pageUtils';\nimport * as style from './tags.module.less';\n\nconst TagPage = ({ data, pageContext }) => {\n  const { tag } = pageContext;\n  const tagName = Config.tags[tag].name || Utils.capitalize(tag);\n  const tagPagePath = Config.pages.tag;\n  const tagImage = data.allFile.edges.find((edge) => edge.node.name === tag).node\n    .childImageSharp.fluid;\n  const posts = data.allMarkdownRemark.edges;\n  return (\n    <Layout className=\"outerPadding\">\n      <Layout className=\"container\">\n        <Header />\n        <SEO\n          title={tagName}\n          description={`All posts about ${tagName}. ${Config.tags[tag].description} `}\n          path={Utils.resolvePageUrl(tagPagePath, tag)}\n          keywords={[tagName]}\n          imageUrl={tagImage.src}\n        />\n        <SidebarWrapper>\n          <div className={`marginTopTitle ${style.tagsList}`}>\n            <h1>\n              #\n              {tagName}\n            </h1>\n            <div className={style.bannerImgContainer}>\n              <Img className={style.bannerImg} fluid={tagImage} alt={tagName} />\n            </div>\n            <h4 className=\"textCenter\">\n              {Config.tags[tag].description}\n            </h4>\n          </div>\n          <Row gutter={[20, 20]}>\n            {posts.map((post, key) => (\n            // eslint-disable-next-line react/no-array-index-key\n              <Col key={key} xs={24} sm={24} md={12} lg={8}>\n                <PostCard data={post} />\n              </Col>\n            ))}\n          </Row>\n        </SidebarWrapper>\n      </Layout>\n    </Layout>\n  );\n};\n\nTagPage.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.arrayOf(PropTypes.object).isRequired,\n    }).isRequired,\n    allFile: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            name: PropTypes.string.isRequired,\n            childImageSharp: PropTypes.shape({\n              fluid: PropTypes.object.isRequired,\n            }).isRequired,\n          }).isRequired,\n        }),\n      ).isRequired,\n    }).isRequired,\n  }).isRequired,\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport const pageQuery = graphql`query ($tag: String!) {\n  allMarkdownRemark(\n      filter: {\n        frontmatter: { tags: { in: [$tag] } }\n        fileAbsolutePath: { regex: \"/index.md$/\" }\n      }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          excerpt\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            tags\n            cover {\n              childImageSharp {\n                fluid(maxWidth: 600) {\n                  ...GatsbyImageSharpFluid_tracedSVG\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    allFile(filter: { name: { eq: $tag }, dir: { regex: \"/tags$/\" } }) {\n      edges {\n        node {\n          name\n          childImageSharp {\n            fluid(maxHeight: 600) {\n              ...GatsbyImageSharpFluid_tracedSVG\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default TagPage;\n","// extracted by mini-css-extract-plugin\nexport var tagsList = \"tags-module--tagsList--10-aU\";\nexport var bannerImgContainer = \"tags-module--bannerImgContainer--2_1Pn\";\nexport var bannerImg = \"tags-module--bannerImg--3gvfh\";"],"sourceRoot":""}